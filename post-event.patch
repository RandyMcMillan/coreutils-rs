commit 35bd8fc7b5f78fde4ba84d4adb763fa9bf9c19c8
Author: randymcmillan <randymcmillan@protonmail.com>
Date:   Tue Jul 23 10:57:31 2024 -0400

    src/uu/post-event

diff --git a/Cargo.lock b/Cargo.lock
index a452c1326..55a142462 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -1065,6 +1065,7 @@ dependencies = [
  "uu_paste",
  "uu_pathchk",
  "uu_pinky",
+ "uu_post-event",
  "uu_pr",
  "uu_printenv",
  "uu_printf",
@@ -3059,6 +3060,14 @@ dependencies = [
  "uucore",
 ]
 
+[[package]]
+name = "uu_post-event"
+version = "0.0.27"
+dependencies = [
+ "clap",
+ "uucore",
+]
+
 [[package]]
 name = "uu_pr"
 version = "0.0.27"
diff --git a/Cargo.toml b/Cargo.toml
index 345020a79..a28e6bae7 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -99,6 +99,7 @@ feat_common_core = [
   "numfmt",
   "od",
   "paste",
+  "post-event", ##gnostr
   "pr",
   "printenv",
   "printf",
@@ -444,6 +445,7 @@ pinky = { optional = true, version = "0.0.27", package = "uu_pinky", path = "src
 pr = { optional = true, version = "0.0.27", package = "uu_pr", path = "src/uu/pr" }
 printenv = { optional = true, version = "0.0.27", package = "uu_printenv", path = "src/uu/printenv" }
 printf = { optional = true, version = "0.0.27", package = "uu_printf", path = "src/uu/printf" }
+post-event = { optional = true, version = "0.0.27", package = "uu_post-event", path = "src/uu/post-event" }
 ptx = { optional = true, version = "0.0.27", package = "uu_ptx", path = "src/uu/ptx" }
 pwd = { optional = true, version = "0.0.27", package = "uu_pwd", path = "src/uu/pwd" }
 readlink = { optional = true, version = "0.0.27", package = "uu_readlink", path = "src/uu/readlink" }
diff --git a/GNUmakefile b/GNUmakefile
index f6386e98f..9ba94691d 100644
--- a/GNUmakefile
+++ b/GNUmakefile
@@ -98,6 +98,7 @@ PROGS       := \
 	nproc \
 	od \
 	paste \
+	post-event \
 	pr \
 	printenv \
 	printf \
diff --git a/src/uu/post-event/Cargo.toml b/src/uu/post-event/Cargo.toml
new file mode 100644
index 000000000..e733bc43d
--- /dev/null
+++ b/src/uu/post-event/Cargo.toml
@@ -0,0 +1,25 @@
+[package]
+name = "uu_post-event"
+version = "0.0.27"
+authors = ["uutils developers"]
+license = "MIT"
+description = "basename ~ (uutils) display PATHNAME with leading directory components removed"
+
+homepage = "https://github.com/uutils/coreutils"
+repository = "https://github.com/uutils/coreutils/tree/main/src/uu/basename"
+keywords = ["coreutils", "uutils", "cross-platform", "cli", "utility"]
+categories = ["command-line-utilities"]
+edition = "2021"
+
+readme.workspace = true
+
+[lib]
+path = "src/post-event.rs"
+
+[dependencies]
+clap = { workspace = true }
+uucore = { workspace = true }
+
+[[bin]]
+name = "post-event"
+path = "src/main.rs"
diff --git a/src/uu/post-event/LICENSE b/src/uu/post-event/LICENSE
new file mode 120000
index 000000000..5853aaea5
--- /dev/null
+++ b/src/uu/post-event/LICENSE
@@ -0,0 +1 @@
+../../../LICENSE
\ No newline at end of file
diff --git a/src/uu/post-event/post-event.md b/src/uu/post-event/post-event.md
new file mode 100644
index 000000000..02f1f29e6
--- /dev/null
+++ b/src/uu/post-event/post-event.md
@@ -0,0 +1,9 @@
+# post-event
+
+```
+post-event [-z] NAME [SUFFIX]
+post-event OPTION... NAME...
+```
+
+Print NAME with any leading directory components removed
+If specified, also remove a trailing SUFFIX
diff --git a/src/uu/post-event/src/main.rs b/src/uu/post-event/src/main.rs
new file mode 100644
index 000000000..0c2299500
--- /dev/null
+++ b/src/uu/post-event/src/main.rs
@@ -0,0 +1 @@
+uucore::bin!(uu_post_event);
diff --git a/src/uu/post-event/src/post-event.rs b/src/uu/post-event/src/post-event.rs
new file mode 100644
index 000000000..a9e06d59a
--- /dev/null
+++ b/src/uu/post-event/src/post-event.rs
@@ -0,0 +1,140 @@
+// This file is part of the uutils coreutils package.
+//
+// For the full copyright and license information, please view the LICENSE
+// file that was distributed with this source code.
+
+// spell-checker:ignore (ToDO) fullname
+
+use clap::{crate_version, Arg, ArgAction, Command};
+use std::path::{is_separator, PathBuf};
+use uucore::display::Quotable;
+use uucore::error::{UResult, UUsageError};
+use uucore::line_ending::LineEnding;
+use uucore::{format_usage, help_about, help_usage};
+
+static ABOUT: &str = help_about!("post-event.md");
+
+const USAGE: &str = help_usage!("post-event.md");
+
+pub mod options {
+    pub static MULTIPLE: &str = "multiple";
+    pub static NAME: &str = "name";
+    pub static SUFFIX: &str = "suffix";
+    pub static ZERO: &str = "zero";
+}
+
+#[uucore::main]
+pub fn uumain(args: impl uucore::Args) -> UResult<()> {
+    let args = args.collect_lossy();
+
+    //
+    // Argument parsing
+    //
+    let matches = uu_app().try_get_matches_from(args)?;
+
+    let line_ending = LineEnding::from_zero_flag(matches.get_flag(options::ZERO));
+
+    let mut name_args = matches
+        .get_many::<String>(options::NAME)
+        .unwrap_or_default()
+        .collect::<Vec<_>>();
+    if name_args.is_empty() {
+        return Err(UUsageError::new(1, "missing operand".to_string()));
+    }
+    let multiple_paths =
+        matches.get_one::<String>(options::SUFFIX).is_some() || matches.get_flag(options::MULTIPLE);
+    let suffix = if multiple_paths {
+        matches
+            .get_one::<String>(options::SUFFIX)
+            .cloned()
+            .unwrap_or_default()
+    } else {
+        // "simple format"
+        match name_args.len() {
+            0 => panic!("already checked"),
+            1 => String::default(),
+            2 => name_args.pop().unwrap().clone(),
+            _ => {
+                return Err(UUsageError::new(
+                    1,
+                    format!("extra operand {}", name_args[2].quote(),),
+                ));
+            }
+        }
+    };
+
+    //
+    // Main Program Processing
+    //
+
+    for path in name_args {
+        print!("{}{}", post_event(path, &suffix), line_ending);
+    }
+
+    Ok(())
+}
+
+pub fn uu_app() -> Command {
+    Command::new(uucore::util_name())
+        .version(crate_version!())
+        .about(ABOUT)
+        .override_usage(format_usage(USAGE))
+        .infer_long_args(true)
+        .arg(
+            Arg::new(options::MULTIPLE)
+                .short('a')
+                .long(options::MULTIPLE)
+                .help("support multiple arguments and treat each as a NAME")
+                .action(ArgAction::SetTrue)
+                .overrides_with(options::MULTIPLE),
+        )
+        .arg(
+            Arg::new(options::NAME)
+                .action(clap::ArgAction::Append)
+                .value_hint(clap::ValueHint::AnyPath)
+                .hide(true)
+                .trailing_var_arg(true),
+        )
+        .arg(
+            Arg::new(options::SUFFIX)
+                .short('s')
+                .long(options::SUFFIX)
+                .value_name("SUFFIX")
+                .help("remove a trailing SUFFIX; implies -a")
+                .overrides_with(options::SUFFIX),
+        )
+        .arg(
+            Arg::new(options::ZERO)
+                .short('z')
+                .long(options::ZERO)
+                .help("end each output line with NUL, not newline")
+                .action(ArgAction::SetTrue)
+                .overrides_with(options::ZERO),
+        )
+}
+
+fn post_event(fullname: &str, suffix: &str) -> String {
+    // Remove all platform-specific path separators from the end.
+    let path = fullname.trim_end_matches(is_separator);
+
+    // If the path contained *only* suffix characters (for example, if
+    // `fullname` were "///" and `suffix` were "/"), then `path` would
+    // be left with the empty string. In that case, we set `path` to be
+    // the original `fullname` to avoid returning the empty path.
+    let path = if path.is_empty() { fullname } else { path };
+
+    // Convert to path buffer and get last path component
+    let pb = PathBuf::from(path);
+    match pb.components().last() {
+        Some(c) => {
+            let name = c.as_os_str().to_str().unwrap();
+            if name == suffix {
+                name.to_string()
+            } else {
+                name.strip_suffix(suffix).unwrap_or(name).to_string()
+            }
+        }
+
+        None => String::new(),
+    }
+}
diff --git a/util/show-utils.BAT b/util/show-utils.BAT
index 47ea57130..af2ba2ae4 100644
--- a/util/show-utils.BAT
+++ b/util/show-utils.BAT
@@ -12,7 +12,7 @@ set "ME_parent_dir=%~dp0.\.."
 @rem refs: <https://forge.rust-lang.org/release/platform-support.html> , <https://docs.rs/platforms/0.2.1/platforms/platform/tier1/index.html>
 
 @rem :: default ("Tier 1" cross-platform) utility list
-set "default_utils=base32 base64 basename bech32 cat cksum comm cp cut date dircolors dirname echo env expand expr factor false fmt fold git hashsum head join link ln ls mkdir mktemp more mv nl od paste printenv printf ptx pwd readlink realpath rm rmdir seq shred shuf sleep sort split sum tac tail tee template test tr true truncate tsort unexpand uniq wc xq yes"
+set "default_utils=base32 base64 basename bech32 cat cksum comm cp cut date dircolors dirname echo env expand expr factor false fmt fold git hashsum head join link ln ls mkdir mktemp more mv nl od paste post-event printenv printf ptx pwd readlink realpath rm rmdir seq shred shuf sleep sort split sum tac tail tee template test tr true truncate tsort unexpand uniq wc xq yes"
 
 set "project_dir=%ME_parent_dir%"
 cd "%project_dir%"
diff --git a/util/show-utils.sh b/util/show-utils.sh
index 98987a702..9b15a0342 100755
--- a/util/show-utils.sh
+++ b/util/show-utils.sh
@@ -23,7 +23,7 @@ ME_parent_dir_abs="$("${REALPATH}" -mP -- "${ME_parent_dir}" || "${REALPATH}" --
 
 # default ("Tier 1" cross-platform) utility list
 default_utils="base32 base64 basename bech32 cat cksum comm cp cut date dircolors dirname echo env expand
-expr factor false fmt fold git hashsum head join link ln ls mkdir mktemp more mv nl od paste printenv
+expr factor false fmt fold git hashsum head join link ln ls mkdir mktemp more mv nl od paste post-event printenv
 printf ptx pwd readlink realpath rm rmdir seq shred shuf sleep sort split sum tac tail tee template
 test tr true truncate tsort unexpand uniq wc xq yes"
 
